<% layout("layout") %>

<div class="wrapper">
    <div class="downloads-section">
        <h2 class="downloads-title">Download Files</h2>
         <table class="downloads-table">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th>Size</th>
                </tr>
            </thead>
            <tbody>
                <% it.files.forEach(function(file){ %>
                    <tr>
                        <td><%= file.name %></td>  
                        <td><%= file.size %></td>
                    </tr>
                <% }) %>
            </tbody>
         </table>
    </div>
    <div class="alert">
        <% if (it.expiry !== null) { %>
        Available until <span id="expiry"></span>
        <% } %>
        <% if (it.limit !== null) { %>
        <%= it.limit %> more downloads available
        <% } %>
    </div>
    <button onclick="download()">Download<%= it.files.length > 1 ? ' All' : '' %></a>
</div>

<script>
<% if (it.expiry !== null) { %>
document.addEventListener('DOMContentLoaded', function () {
    const expiry = new Date(<%= it.expiry %>)
    document.getElementById('expiry').innerText = expiry.toLocaleString()
}, false)
<% } %>
async function download() {
    document.querySelector('button').setAttribute('disabled', 'disabled')
    document.querySelector('button').setAttribute('done', '0')
    try {
        const response = await fetch('<%= it.downloadUrl %>', {
            headers: {
            'Content-Type': 'application/json',
            }
        })

        if (!response.ok) throw new Error('Download failed')

        const contentDisposition = response.headers.get('Content-Disposition')
        const filename = contentDisposition?.match(/filename="(.+)"/)?.[1] || 'attachments.zip'

        const reader = response.body?.getReader()
        if (!reader) throw new Error('No readable stream')

        const contentLength = +(response.headers.get('Content-Length') || 0)
        let receivedLength = 0
        const chunks = []

        while (true) {
            const { done, value } = await reader.read()
            if (done) break
            
            chunks.push(value)
            receivedLength += value.length
            
            // Update progress (0-100)
            if (contentLength > 0) {
                const progress = Math.round((receivedLength / contentLength) * 100)
                document.querySelector('button').setAttribute('done', progress)
            }
        }

        const blob = new Blob(chunks)
        const url = URL.createObjectURL(blob)

        const a = document.createElement('a')
        a.href = url
        a.download = filename
        a.style.display = 'none'
        document.body.appendChild(a)
        a.click()

        setTimeout(() => {
            document.body.removeChild(a)
            URL.revokeObjectURL(url)
        }, 100)
    } catch (error) {
        console.error('Download error:', error)
    }
}
const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
let darkMode = prefersDark;

const lightLogo = "https://cdn1.dws.gr/storage/v1/object/public/images/58836e37-9509-4929-805d-c601b7cc1d58/1737541073000logo-final.svg";
const darkLogo = "https://cdn1.dws.gr/storage/v1/object/public/images/58836e37-9509-4929-805d-c601b7cc1d58/17477313198241737541073000logo-final.svg";

function updateThemeAssets(mode) {
    // Update icon
    const themeIcon = document.getElementById("theme-icon");
    const isDark = mode === "dark";

    themeIcon.innerHTML = isDark
        ? '<path d="M21.752 15.002A9 9 0 1112 3a7.5 7.5 0 009.752 12.002z" />'
        : '<path d="m12.6984 19.8828c.1568-.015.3137.0387.4297.1482.1139.1074.1783.26.1719.4189v3.3c.0021.1977-.101.3824-.2729.4834-.1719.0988-.3824.0988-.5543 0-.1719-.101-.275-.2857-.2729-.4834v-3.3c-.0064-.2621.174-.492.4297-.55.0215-.0064.0451-.0129.0688-.0172zm5.3797-2.2516c.0172 0 .0344 0 .0516 0s.0344 0 .0516 0c.1504.0021.2922.0623.3953.1719l2.3375 2.3375c.1633.1332.2385.3459.1912.5521-.0473.2041-.2084.3652-.4125.4125-.2063.0473-.4189-.0279-.5521-.1912l-2.3375-2.3375c-.1525-.1418-.2127-.3566-.1547-.5586.058-.1998.2234-.3502.4297-.3867zm-10.8281 0c.0172 0 .0344 0 .0516 0 .2256-.0043.434.1289.5199.3373.0881.2084.0387.4512-.1246.608l-2.3375 2.3375c-.1332.1633-.3459.2385-.5521.1912-.2041-.0473-.3652-.2084-.4125-.4125-.0473-.2063.0279-.4189.1912-.5521l2.3375-2.3375c.0859-.0924.202-.1547.3266-.1719zm13.0453-5.4313c.0172 0 .0344 0 .0516 0s.0344 0 .0516 0 .0344 0 .0516 0h3.3c.1977-.0021.3824.101.4834.2729.0988.1719.0988.3824 0 .5543-.101.1719-.2857.275-.4834.2729h-3.3c-.3029.043-.5844-.1697-.6273-.4727s.1697-.5844.4727-.6273zm-18.7 0c.0172 0 .0344 0 .0516 0s.0344 0 .0516 0 .0344 0 .0516 0h3.3c.1977-.0021.3824.101.4834.2729.0988.1719.0988.3824 0 .5543-.101.1719-.2857.275-.4834.2729h-3.3c-.3029.043-.5844-.1697-.6273-.4727s.1697-.5844.4727-.6273zm11.1203-3.85c-2.4148.0193-4.3656 1.9809-4.3656 4.4 0 2.432 1.9701 4.4 4.4 4.4 2.432 0 4.4-1.968 4.4-4.4 0-2.4127-1.9422-4.3721-4.3484-4.4-.0172 0-.0344 0-.0516 0-.0107 0-.0236 0-.0344 0zm-.0172-1.1c.0172 0 .0344 0 .0516 0 .0107 0 .0236 0 .0344 0 .058.0021.116.0129.1719.0344.0193 0 .0322.0172.0516.0172 2.9025.1439 5.2422 2.5115 5.2422 5.4484 0 3.0271-2.4729 5.5-5.5 5.5s-5.5-2.4729-5.5-5.5c0-2.9477 2.359-5.3238 5.2766-5.4484.0064-.0064.0107-.0107.0172-.0172.0344-.0086.0688-.015.1031-.0172.0172-.0064.0344-.0129.0516-.0172zm7.7688-2.8359c.2363-.0301.4641.0945.5672.3115.101.2148.0516.4705-.1203.6338l-2.3375 2.3375c-.1332.1633-.3459.2385-.5521.1912-.2041-.0473-.3652-.2084-.4125-.4125-.0473-.2063.0279-.4189.1912-.5521l2.3375-2.3375c.0859-.0924.202-.1547.3266-.1719zm-15.6063 0c.0172 0 .0344 0 .0516 0 .1676-.0129.333.0494.4469.1719l2.3375 2.3375c.1633.1332.2385.3459.1912.5521-.0473.2041-.2084.3652-.4125.4125-.2063.0473-.4189-.0279-.5521-.1912l-2.3375-2.3375c-.1525-.1418-.2127-.3566-.1547-.5586.058-.1998.2234-.3502.4297-.3867zm7.8375-3.2313c.1568-.015.3137.0387.4297.1482.1139.1074.1783.26.1719.4189v3.3c.0021.1977-.101.3824-.2729.4834-.1719.0988-.3824.0988-.5543 0-.1719-.101-.275-.2857-.2729-.4834v-3.3c-.0064-.2621.174-.492.4297-.55.0215-.0064.0451-.0129.0688-.0172z" />';

    const logo = document.getElementById("logo");
    if (logo) {
        logo.src = isDark ? darkLogo : lightLogo;
    }
}

function toggleDarkMode() {
    darkMode = !darkMode;
    const mode = darkMode ? "dark" : "light";
    document.body.classList.toggle("dark-mode", darkMode);
    localStorage.setItem("theme", mode);
    updateThemeAssets(mode);
}

window.addEventListener("DOMContentLoaded", () => {
    const savedTheme = localStorage.getItem("theme");
    const mode = savedTheme || (prefersDark ? "dark" : "light");

    darkMode = mode === "dark";
    if (darkMode) {
        document.body.classList.add("dark-mode");
    }
    updateThemeAssets(mode);
    document.getElementById("toggle-dark-mode").addEventListener("click", toggleDarkMode);
});
</script>