<% layout("layout") %>

<div class="wrapper">
    <div class="downloads-section">
        <h2 class="downloads-title">Download Files</h2>
         <table class="downloads-table">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th>Size</th>
                </tr>
            </thead>
            <tbody>
                <% it.files.forEach(function(file){ %>
                    <tr>
                        <td><%= file.name %></td>  
                        <td><%= file.size %></td>
                    </tr>
                <% }) %>
            </tbody>
         </table>
    </div>
    <div class="alert">
        <% if (it.expiry !== null) { %>
        Available until <span id="expiry"></span>
        <% } %>
        <% if (it.limit !== null) { %>
        <%= it.limit %> more downloads available
        <% } %>
    </div>
    <button onclick="download()">Download<%= it.files.length > 1 ? ' All' : '' %></a>
</div>

<script>
<% if (it.expiry !== null) { %>
document.addEventListener('DOMContentLoaded', function () {
    const expiry = new Date(<%= it.expiry %>)
    document.getElementById('expiry').innerText = expiry.toLocaleString()
}, false)
<% } %>
async function download() {
    document.querySelector('button').setAttribute('disabled', 'disabled')
    document.querySelector('button').setAttribute('done', '0')
    try {
        const response = await fetch('<%= it.downloadUrl %>', {
            headers: {
            'Content-Type': 'application/json',
            }
        })

        if (!response.ok) throw new Error('Download failed')

        const contentDisposition = response.headers.get('Content-Disposition')
        const filename = contentDisposition?.match(/filename="(.+)"/)?.[1] || 'attachments.zip'

        const reader = response.body?.getReader()
        if (!reader) throw new Error('No readable stream')

        const contentLength = +(response.headers.get('Content-Length') || 0)
        let receivedLength = 0
        const chunks = []

        while (true) {
            const { done, value } = await reader.read()
            if (done) break
            
            chunks.push(value)
            receivedLength += value.length
            
            // Update progress (0-100)
            if (contentLength > 0) {
                const progress = Math.round((receivedLength / contentLength) * 100)
                document.querySelector('button').setAttribute('done', progress)
            }
        }

        const blob = new Blob(chunks)
        const url = URL.createObjectURL(blob)

        const a = document.createElement('a')
        a.href = url
        a.download = filename
        a.style.display = 'none'
        document.body.appendChild(a)
        a.click()

        setTimeout(() => {
            document.body.removeChild(a)
            URL.revokeObjectURL(url)
        }, 100)
    } catch (error) {
        console.error('Download error:', error)
    }
}
const lightLogo = "https://cdn1.dws.gr/storage/v1/object/public/images/58836e37-9509-4929-805d-c601b7cc1d58/1737541073000logo-final.svg";
const darkLogo = "https://cdn1.dws.gr/storage/v1/object/public/images/58836e37-9509-4929-805d-c601b7cc1d58/17477313198241737541073000logo-final.svg";
const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
let darkMode = prefersDark;

function setIcon(mode) {
    const themeIcon = document.getElementById("theme-icon");
    const isDark = mode === "dark";

    themeIcon.innerHTML = isDark
        ? '<path d="M21.752 15.002A9 9 0 1112 3a7.5 7.5 0 009.752 12.002z" />' 
        : '<path d="M12 4.5a1 1 0 011 1v1.5a1 1 0 01-2 0V5.5a1 1 0 011-1zm6.364 1.636a1 1 0 011.414 0l1.061 1.061a1 1 0 01-1.414 1.414l-1.061-1.061a1 1 0 010-1.414zM19.5 11a1 1 0 011 1v1.5a1 1 0 01-2 0V12a1 1 0 011-1zm-7.5 6a1 1 0 011 1v1.5a1 1 0 01-2 0V18a1 1 0 011-1zm-6.364-1.636a1 1 0 00-1.414 0l-1.061 1.061a1 1 0 001.414 1.414l1.061-1.061a1 1 0 000-1.414zM4.5 11a1 1 0 00-1 1v1.5a1 1 0 002 0V12a1 1 0 00-1-1zm1.636-6.364a1 1 0 00-1.414 0L3.661 5.697a1 1 0 001.414 1.414l1.061-1.061a1 1 0 000-1.414zM12 7a5 5 0 100 10 5 5 0 000-10z" />';

    const logo = document.getElementById("theme-logo");
    if (logo) {
        logo.src = isDark ? darkLogo : lightLogo;
    }

}

function toggleDarkMode() {
    darkMode = !darkMode;
    document.body.classList.toggle("dark-mode", darkMode);
    const mode = darkMode ? "dark" : "light";
    localStorage.setItem("theme", mode);
    setIcon(mode);
}

window.addEventListener("DOMContentLoaded", () => {
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme === "dark") {
        darkMode = true;
        document.body.classList.add("dark-mode");
    }
    setIcon(darkMode ? "dark" : "light");
    document.getElementById("toggle-dark-mode").addEventListener("click", toggleDarkMode);
});
</script>